# Running Executables on HPC

Ok, we've gotten comfortable navigating around the HPC filesystem. Now how do we run executables on files?

Let's talk about the two problems: 1) How do we find executables on a cluster, and 2) how do we load them up and run them?

## A empty environment



Remember, we can poke around and see whether `samtools` is installed on the machine using `which`:

```
which samtools
```

If `samtools` is available, it will give the path. If it isn't, you will have an empty response.

So if we don't have `samtools` immediately available, how do we discover it?

## Environment Modules

Before you install your own versions of software, it's important to realize that this problem may be solved for you.

Your first stop should be looking for environment modules on the HPC. Not all HPCs have these, but if they have them, this should be your first stop to find executables. 

`lmod` is a system for loading and unloading software modules. It is usually installed on HPCs. The commands all start with `module`, and there are a number of ones that are useful for you.

- `module avail`
- `module load`
- `module purge`

:::{.callout}
## For FH Users

On the FH cluster, `ml` is a handy command that combines `module load` and `module avail`.

You can load a module with `ml <module_name>`.
:::

### Tip: Always Use Versioning for Environment Modules



### Tip: `module purge` when you're done

When you're done with a software module, you should use `module purge` to clear out its' software environment. 

```
module purge
```

### Full Script Example

This is an example of a full script that uses environment modules. 

```bash
#| eval: false
#| filename: samtools_count.sh
#!/bin/bash
module load SAMtools/1.19.2-GCC-13.2.0
samtools view -c $1 > $1.counts.txt
module purge
```

We can use this script by making it executable, and then run it with:

```
./samtools_count.sh my_bam_file.sh
```

This will output a counts file called `my_bam_file.counts.txt` in our home directory.

We'll talk more about arguments in the scripting chapter (@sec-positional).

## Running Software that's not available.

If there is not a module available for our software, then we have a few options, in terms of effort.

1. Use a docker container with `apptainer` that has our software
2. Install the binary into our `/home` directory using `conda`
3. Compile the executable ourselves

For more information about these different methods, please refer to this article: [Why your computational environment is important](https://sciwiki.fredhutch.org/dasldemos/computational_rank/).

We will get more in-depth into containers in the [Interactive Shell chapter](interactive_shell.html).

